#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, Режим)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ВКМ_ОбслуживаниеКлиента.Ссылка,
				   |	ВКМ_ОбслуживаниеКлиента.Дата,
				   |	ВКМ_ОбслуживаниеКлиента.Договор,
				   |	ДоговорыКонтрагентов.ВМК_ДатаНачала,
				   |	ДоговорыКонтрагентов.ВМК_ДатаОкончания,
				   |	ДоговорыКонтрагентов.ВидДоговора,
				   |	ДоговорыКонтрагентов.ВМК_СтоимостьЧасаРаботы,
				   |	ВКМ_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот
				   |ИЗ
				   |	Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				   |		ПО ВКМ_ОбслуживаниеКлиента.Договор = ДоговорыКонтрагентов.Ссылка,
				   |	РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(&Дата, Сотрудник = &Сотрудник) КАК
				   |		ВКМ_УсловияОплатыСотрудниковСрезПоследних
				   |ГДЕ
				   |	ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Сотрудник", Специалист);

	Выборка = Запрос.Выполнить();

	Если Выборка.Пустой() Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю("Не заполнены условия оплаты сотруднику.");
		Возврат;
	КонецЕсли;

	Выборка = Выборка.Выбрать();

	Пока Выборка.Следующий() Цикл

		Если Не Выборка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбоненскоеОбслуживание Тогда
			ТекстСообщения = ("Документ не проведен. Выберете договор с видом ""Абонентское обслуживание""");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
			Продолжить;
		КонецЕсли;

		Если Не Выборка.ВМК_ДатаНачала <= Дата Или Не Выборка.ВМК_ДатаОкончания >= Дата Тогда
			ТекстСообщения = СтрШаблон(
				"Документ не проведен. Дата обслуживания клиента %1 не соответствует периоду действия договора %2",
				Формат(Дата, "ДЛФ=D;"), Договор);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
			Продолжить;
		КонецЕсли;

		// регистр ВКМ_ВыполненныеКлиентуРаботы, Расход
		Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
		Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
		Движение.Период = Дата;
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Клиент = Клиент;
		Движение.Договор = Договор;
		Движение.КоличествоЧасов = ВыполненныеРаботы.Итог("ЧасыКОплатеКлиенту");
		Движение.СуммаКОплате = Движение.КоличествоЧасов * Выборка.ВМК_СтоимостьЧасаРаботы;

		// регистр ВКМ_ВыполненныеСотрудникомРаботы, Приход
		Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина;
		Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Сотрудник = Специалист;
		Движение.ЧасовКОплате = ВыполненныеРаботы.Итог("ЧасыКОплатеКлиенту");
		Движение.СуммаКОплате = Движение.ЧасовКОплате * Выборка.ВМК_СтоимостьЧасаРаботы * Выборка.ПроцентОтРабот / 100;

	КонецЦикла;

	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	//Данный фрагмент построен конструктором.
	//При повторном использовании конструктора, внесенные вручную данные будут утеряны!

	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если Не ЭтоНовый() Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВКМ_ОбслуживаниеКлиента.ДатаПроведенияРабот,
		|	ВКМ_ОбслуживаниеКлиента.ВремяНачалаРабот,
		|	ВКМ_ОбслуживаниеКлиента.Специалист
		|ИЗ
		|	Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
		|ГДЕ
		|	ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка";

		Запрос.УстановитьПараметр("Ссылка", Ссылка);

		РезультатЗапроса = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		ВыборкаДетальныеЗаписи.Следующий();

		Если ВыборкаДетальныеЗаписи.ДатаПроведенияРабот <> ДатаПроведенияРабот Тогда
			НоваяДата = ДатаПроведенияРабот;
			ШаблонДата = "Дата начала " + Формат(НоваяДата, "ДФ=dd.MM.yyyy;");
		КонецЕсли;

		Если ВыборкаДетальныеЗаписи.ВремяНачалаРабот <> ВремяНачалаРабот Тогда
			НовоеВремяНачалаРабот = ВремяНачалаРабот;
			ШаблонВремяНачалаРабот = "Время начала работ " + Формат(НовоеВремяНачалаРабот, "ДЛФ=T;");
		КонецЕсли;

		Если ВыборкаДетальныеЗаписи.Специалист <> Специалист Тогда
			НовыйСпециалист = Специалист;
			ШаблонСпециалист = "Специалист " + НовыйСпециалист;
		КонецЕсли;

		Если ЗначениеЗаполнено(НоваяДата) Или ЗначениеЗаполнено(НовоеВремяНачалаРабот) Или ЗначениеЗаполнено(
			НовыйСпециалист) Тогда
			ОбъектУведомлениеТГ = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
			ШаблонНаименование = "По документу № %1";
			ОбъектУведомлениеТГ.Наименование = СтрШаблон(ШаблонНаименование, Номер);
			ШаблонСообщения = "Внесены изменения: %1 %2 %3";
			ОбъектУведомлениеТГ.ТекстСообщения = СтрШаблон(ШаблонСообщения, ШаблонДата, ШаблонВремяНачалаРабот,
				ШаблонСпециалист);
			ОбъектУведомлениеТГ.Записать();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецЕсли