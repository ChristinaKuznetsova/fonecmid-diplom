#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)

	Ответственный = Пользователи.ТекущийПользователь();

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения);
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)

	Движения.ОбработкаЗаказов.Записывать = Истина;
	Движения.ОстаткиТоваров.Записывать = Истина;

	Движение = Движения.ОбработкаЗаказов.Добавить();
	Движение.Период = Дата;
	Движение.Контрагент = Контрагент;
	Движение.Договор = Договор;
	Движение.Заказ = Основание;
	Движение.СуммаОтгрузки = СуммаДокумента;

	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Движение = Движения.ОстаткиТоваров.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Контрагент = Контрагент;
		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
		Движение.Сумма = ТекСтрокаТовары.Сумма;
		Движение.Количество = ТекСтрокаТовары.Количество;
	КонецЦикла;
	
//ВКМ

	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;

	Для Каждого ТекСтрокаУслуги Из Услуги Цикл
		Если ТекСтрокаУслуги.Номенклатура = Константы.ВКМ_НоменклатураРаботыСпециалиста.Получить() Тогда
			Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Клиент = Контрагент;
			Движение.Договор = Договор;
			Движение.СуммаКОплате = ТекСтрокаУслуги.Сумма;
			Движение.КоличествоЧасов = ТекСтрокаУслуги.Количество;
		КонецЕсли;
	КонецЦикла;
	
//ВКМ

КонецПроцедуры

//ВКМ
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	Если Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбоненскоеОбслуживание Тогда
		ПорядковыйНомер = ПроверяемыеРеквизиты.Найти("Основание");
		ПроверяемыеРеквизиты.Удалить(ПорядковыйНомер);
	КонецЕсли;

КонецПроцедуры
//ВКМ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ЗаказПокупателя.Организация КАК Организация,
				   |	ЗаказПокупателя.Контрагент КАК Контрагент,
				   |	ЗаказПокупателя.Договор КАК Договор,
				   |	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
				   |	ЗаказПокупателя.Товары.(
				   |		Ссылка КАК Ссылка,
				   |		НомерСтроки КАК НомерСтроки,
				   |		Номенклатура КАК Номенклатура,
				   |		Количество КАК Количество,
				   |		Цена КАК Цена,
				   |		Сумма КАК Сумма
				   |	) КАК Товары,
				   |	ЗаказПокупателя.Услуги.(
				   |		Ссылка КАК Ссылка,
				   |		НомерСтроки КАК НомерСтроки,
				   |		Номенклатура КАК Номенклатура,
				   |		Количество КАК Количество,
				   |		Цена КАК Цена,
				   |		Сумма КАК Сумма
				   |	) КАК Услуги
				   |ИЗ
				   |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
				   |ГДЕ
				   |	ЗаказПокупателя.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);

	ТоварыОснования = Выборка.Товары.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), ТоварыОснования);
	КонецЦикла;

	УслугиОснования = Выборка.Услуги.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Услуги.Добавить(), УслугиОснования);
	КонецЦикла;

	Основание = ДанныеЗаполнения;

КонецПроцедуры

// ВКМ
Процедура ВКМ_ВыполнитьАвтозаполнение(Договор, ДатаДокумента) Экспорт

	КонстантаАбонентскоеОбслуживание = Константы.ВКМ_НоменклатураАбонентскаяПлата.Получить();
	КонстантаРаботыСпециалиста = Константы.ВКМ_НоменклатураРаботыСпециалиста.Получить();

	Если Не ЗначениеЗаполнено(КонстантаАбонентскоеОбслуживание) Или Не ЗначениеЗаполнено(КонстантаРаботыСпециалиста) Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(
			"Для автоматического заполнения должны быть заполнены константы ""Номенклатура Абонентская плата"" и ""Номенклатура Работы специалиста"" ");
		Возврат;
	КонецЕсли;

	Услуги.Очистить();

	Если Договор.ВМК_СуммаАбоненскойПлаты > 0 Тогда
		СтрокаУслуги = Услуги.Добавить();
		СтрокаУслуги.Номенклатура = КонстантаАбонентскоеОбслуживание;
		СтрокаУслуги.Количество = 1;
		СтрокаУслуги.Цена = Договор.ВМК_СуммаАбоненскойПлаты;
		СтрокаУслуги.Сумма = Договор.ВМК_СуммаАбоненскойПлаты;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	-СУММА(ВКМ_ВыполненныеКлиентуРаботыОбороты.КоличествоЧасовОборот) КАК КоличествоЧасов,
	|	-СУММА(ВКМ_ВыполненныеКлиентуРаботыОбороты.СуммаКОплатеОборот) КАК СуммаКОплате,
	|	ВКМ_ВыполненныеКлиентуРаботыОбороты.Договор
	|ИЗ
	|	РегистрНакопления.ВКМ_ВыполненныеКлиентуРаботы.Обороты(&ДатаНачала, &ДатаОкончания,, Договор = &Договор) КАК
	|		ВКМ_ВыполненныеКлиентуРаботыОбороты
	|СГРУППИРОВАТЬ ПО
	|	ВКМ_ВыполненныеКлиентуРаботыОбороты.Договор";

	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ДатаДокумента));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ДатаДокумента));

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		СтрокаУслуги = Услуги.Добавить();
		СтрокаУслуги.Номенклатура = КонстантаРаботыСпециалиста;
		СтрокаУслуги.Количество = Выборка.КоличествоЧасов;
		СтрокаУслуги.Цена = Выборка.СуммаКОплате / Выборка.КоличествоЧасов;
		СтрокаУслуги.Сумма = Выборка.СуммаКОплате;
	КонецЕсли;

	СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");

КонецПроцедуры

// ВКМ
#КонецОбласти

#КонецЕсли